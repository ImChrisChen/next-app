name: App Release
on:
  push:
    tags: [ 'v*' ]
    branches: ['develop']
jobs:
  update-app-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      # 更新版本号
      - name: update package version
        run: |
          git config --global user.email "imchrisorz@gmail.com"
          git config --global user.name "github-actions[bot]"
          npm version patch

      # 获取版本号
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      # 推送代码
      - uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          amend: true
          force: true
          empty: true
          message: 'chore(ci/cd): Update version:${{ env.PACKAGE_VERSION }}'
          branch: ${{ github.ref_name }}

  create-release:
    needs: update-app-version
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false    # 为true的时候是使用PAT令牌，而不是是GITHUB_TOKEN
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id
  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
#        platform: [ macos-latest, ubuntu-20.04, windows-latest ]
        platform: [ macos-latest ]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - run: mkdir ./app-release && ls -al

#      - uses: tauri-apps/tauri-action@v0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
#          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
#        with:
#          releaseId: ${{ needs.create-release.outputs.release_id }}
#      - run: ls -al ./app-release
#      - run: echo $GITHUB_ENV

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })


